
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003730  08003730  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  08003730  08003730  00004730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003738  08003738  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003738  08003738  00004738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800373c  0800373c  0000473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003740  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          00000100  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c18b  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002343  00000000  00000000  000111d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00013520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a3  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e16  00000000  00000000  00014b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f117  00000000  00000000  00035979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6cae  00000000  00000000  00044a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b73e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032c8  00000000  00000000  0010b784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0010ea4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003708 	.word	0x08003708

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003708 	.word	0x08003708

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2108      	movs	r1, #8
 80004c2:	482f      	ldr	r0, [pc, #188]	@ (8000580 <button_scan+0xc8>)
 80004c4:	f001 fa2a 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	482c      	ldr	r0, [pc, #176]	@ (8000580 <button_scan+0xc8>)
 80004ce:	f001 fa25 	bl	800191c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 80004d2:	230a      	movs	r3, #10
 80004d4:	2202      	movs	r2, #2
 80004d6:	492b      	ldr	r1, [pc, #172]	@ (8000584 <button_scan+0xcc>)
 80004d8:	482b      	ldr	r0, [pc, #172]	@ (8000588 <button_scan+0xd0>)
 80004da:	f002 f869 	bl	80025b0 <HAL_SPI_Receive>

	int button_index = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 80004e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004e6:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	e03f      	b.n	800056e <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	db06      	blt.n	8000502 <button_scan+0x4a>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	dc03      	bgt.n	8000502 <button_scan+0x4a>
			button_index = i + 4;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3304      	adds	r3, #4
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e018      	b.n	8000534 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b03      	cmp	r3, #3
 8000506:	dd07      	ble.n	8000518 <button_scan+0x60>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b07      	cmp	r3, #7
 800050c:	dc04      	bgt.n	8000518 <button_scan+0x60>
			button_index = 7 - i;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f1c3 0307 	rsb	r3, r3, #7
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	e00d      	b.n	8000534 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b07      	cmp	r3, #7
 800051c:	dd06      	ble.n	800052c <button_scan+0x74>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b0b      	cmp	r3, #11
 8000522:	dc03      	bgt.n	800052c <button_scan+0x74>
			button_index = i + 4;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3304      	adds	r3, #4
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e003      	b.n	8000534 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f1c3 0317 	rsb	r3, r3, #23
 8000532:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <button_scan+0xcc>)
 8000536:	881a      	ldrh	r2, [r3, #0]
 8000538:	897b      	ldrh	r3, [r7, #10]
 800053a:	4013      	ands	r3, r2
 800053c:	b29b      	uxth	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d005      	beq.n	800054e <button_scan+0x96>
			button_count[button_index] = 0;
 8000542:	4a12      	ldr	r2, [pc, #72]	@ (800058c <button_scan+0xd4>)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2100      	movs	r1, #0
 8000548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800054c:	e009      	b.n	8000562 <button_scan+0xaa>
		else
			button_count[button_index]++;
 800054e:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <button_scan+0xd4>)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000556:	3301      	adds	r3, #1
 8000558:	b299      	uxth	r1, r3
 800055a:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <button_scan+0xd4>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000562:	897b      	ldrh	r3, [r7, #10]
 8000564:	085b      	lsrs	r3, r3, #1
 8000566:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3301      	adds	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	ddbc      	ble.n	80004ee <button_scan+0x36>
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020c00 	.word	0x40020c00
 8000584:	20000058 	.word	0x20000058
 8000588:	20000078 	.word	0x20000078
 800058c:	20000038 	.word	0x20000038

08000590 <initClock>:
int isButtonUp(void);
int isButtonDown(void);
int isButtonPressed(void);

void initClock(int min_num, int hour_num)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	counter = 0;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <initClock+0x30>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	second = 0;
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <initClock+0x34>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
	minute = min_num;
 80005a6:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <initClock+0x38>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6013      	str	r3, [r2, #0]
	hour = hour_num;
 80005ac:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <initClock+0x3c>)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	6013      	str	r3, [r2, #0]

	return;
 80005b2:	bf00      	nop
}
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000005b 	.word	0x2000005b
 80005c4:	2000005c 	.word	0x2000005c
 80005c8:	20000060 	.word	0x20000060
 80005cc:	20000064 	.word	0x20000064

080005d0 <clockRun>:

void clockRun()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	counter = (counter + 1) % 20;
 80005d4:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <clockRun+0xf4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	4b3b      	ldr	r3, [pc, #236]	@ (80006c8 <clockRun+0xf8>)
 80005dc:	fb83 1302 	smull	r1, r3, r3, r2
 80005e0:	10d9      	asrs	r1, r3, #3
 80005e2:	17d3      	asrs	r3, r2, #31
 80005e4:	1ac9      	subs	r1, r1, r3
 80005e6:	460b      	mov	r3, r1
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	440b      	add	r3, r1
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	1ad1      	subs	r1, r2, r3
 80005f0:	b2ca      	uxtb	r2, r1
 80005f2:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <clockRun+0xf4>)
 80005f4:	701a      	strb	r2, [r3, #0]

	if(counter == 0)
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <clockRun+0xf4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d160      	bne.n	80006c0 <clockRun+0xf0>
	{
	  second++;
 80005fe:	4b33      	ldr	r3, [pc, #204]	@ (80006cc <clockRun+0xfc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a31      	ldr	r2, [pc, #196]	@ (80006cc <clockRun+0xfc>)
 8000606:	6013      	str	r3, [r2, #0]
	  if(second == 60)
 8000608:	4b30      	ldr	r3, [pc, #192]	@ (80006cc <clockRun+0xfc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b3c      	cmp	r3, #60	@ 0x3c
 800060e:	d157      	bne.n	80006c0 <clockRun+0xf0>
	  {
		  second = 0;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <clockRun+0xfc>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
		  minute++;
 8000616:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <clockRun+0x100>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <clockRun+0x100>)
 800061e:	6013      	str	r3, [r2, #0]
		  if(minute == 60)
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <clockRun+0x100>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b3c      	cmp	r3, #60	@ 0x3c
 8000626:	d12c      	bne.n	8000682 <clockRun+0xb2>
		  {
			  minute = 0;
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <clockRun+0x100>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
			  hour++;
 800062e:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <clockRun+0x104>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <clockRun+0x104>)
 8000636:	6013      	str	r3, [r2, #0]
			  if(hour == 24)
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <clockRun+0x104>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b18      	cmp	r3, #24
 800063e:	d102      	bne.n	8000646 <clockRun+0x76>
			  {
				  hour = 0;
 8000640:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <clockRun+0x104>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
			  }
			  led_7seg_set_digit(hour / 10, 0, 0);
 8000646:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <clockRun+0x104>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <clockRun+0xf8>)
 800064c:	fb82 1203 	smull	r1, r2, r2, r3
 8000650:	1092      	asrs	r2, r2, #2
 8000652:	17db      	asrs	r3, r3, #31
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fb82 	bl	8000d64 <led_7seg_set_digit>
			  led_7seg_set_digit(hour % 10, 1, 0);
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <clockRun+0x104>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <clockRun+0xf8>)
 8000666:	fb83 1302 	smull	r1, r3, r3, r2
 800066a:	1099      	asrs	r1, r3, #2
 800066c:	17d3      	asrs	r3, r2, #31
 800066e:	1ac8      	subs	r0, r1, r3
 8000670:	4603      	mov	r3, r0
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4403      	add	r3, r0
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1ad0      	subs	r0, r2, r3
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	f000 fb71 	bl	8000d64 <led_7seg_set_digit>
		  }
		  led_7seg_set_digit(minute / 10, 2, 0);
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <clockRun+0x100>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a10      	ldr	r2, [pc, #64]	@ (80006c8 <clockRun+0xf8>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	1092      	asrs	r2, r2, #2
 800068e:	17db      	asrs	r3, r3, #31
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	2200      	movs	r2, #0
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fb64 	bl	8000d64 <led_7seg_set_digit>
		  led_7seg_set_digit(minute % 10, 3, 0);
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <clockRun+0x100>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <clockRun+0xf8>)
 80006a2:	fb83 1302 	smull	r1, r3, r3, r2
 80006a6:	1099      	asrs	r1, r3, #2
 80006a8:	17d3      	asrs	r3, r2, #31
 80006aa:	1ac8      	subs	r0, r1, r3
 80006ac:	4603      	mov	r3, r0
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4403      	add	r3, r0
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	1ad0      	subs	r0, r2, r3
 80006b6:	2200      	movs	r2, #0
 80006b8:	2103      	movs	r1, #3
 80006ba:	f000 fb53 	bl	8000d64 <led_7seg_set_digit>
	  }
	}
	return;
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000005b 	.word	0x2000005b
 80006c8:	66666667 	.word	0x66666667
 80006cc:	2000005c 	.word	0x2000005c
 80006d0:	20000060 	.word	0x20000060
 80006d4:	20000064 	.word	0x20000064

080006d8 <clockConfigMin>:

int toggle = 0;

void clockConfigMin()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	counter = (counter + 1) % 20;
 80006dc:	4b38      	ldr	r3, [pc, #224]	@ (80007c0 <clockConfigMin+0xe8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	4b38      	ldr	r3, [pc, #224]	@ (80007c4 <clockConfigMin+0xec>)
 80006e4:	fb83 1302 	smull	r1, r3, r3, r2
 80006e8:	10d9      	asrs	r1, r3, #3
 80006ea:	17d3      	asrs	r3, r2, #31
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	1ad1      	subs	r1, r2, r3
 80006f8:	b2ca      	uxtb	r2, r1
 80006fa:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <clockConfigMin+0xe8>)
 80006fc:	701a      	strb	r2, [r3, #0]
	if(counter == 1)
 80006fe:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <clockConfigMin+0xe8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d105      	bne.n	8000712 <clockConfigMin+0x3a>
	{
		toggle = 1 - toggle;
 8000706:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <clockConfigMin+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1c3 0301 	rsb	r3, r3, #1
 800070e:	4a2e      	ldr	r2, [pc, #184]	@ (80007c8 <clockConfigMin+0xf0>)
 8000710:	6013      	str	r3, [r2, #0]
	}

	if(isButtonUp())
 8000712:	f000 f907 	bl	8000924 <isButtonUp>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00d      	beq.n	8000738 <clockConfigMin+0x60>
	{
		if(minute < 59)
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <clockConfigMin+0xf4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b3a      	cmp	r3, #58	@ 0x3a
 8000722:	dc05      	bgt.n	8000730 <clockConfigMin+0x58>
		{
			++minute;
 8000724:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <clockConfigMin+0xf4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a28      	ldr	r2, [pc, #160]	@ (80007cc <clockConfigMin+0xf4>)
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	e015      	b.n	800075c <clockConfigMin+0x84>
		}
		else
		{
			minute	= 0;
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <clockConfigMin+0xf4>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e011      	b.n	800075c <clockConfigMin+0x84>
		}
	}
	else if(isButtonDown())
 8000738:	f000 f910 	bl	800095c <isButtonDown>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <clockConfigMin+0x84>
	{
		if(minute > 0)
 8000742:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <clockConfigMin+0xf4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	dd05      	ble.n	8000756 <clockConfigMin+0x7e>
		{
			--minute;
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <clockConfigMin+0xf4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <clockConfigMin+0xf4>)
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	e002      	b.n	800075c <clockConfigMin+0x84>
		}
		else
		{
			minute = 59;
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <clockConfigMin+0xf4>)
 8000758:	223b      	movs	r2, #59	@ 0x3b
 800075a:	601a      	str	r2, [r3, #0]
		}
	}
	else;

	turnOffLed(0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fa5d 	bl	8000c1c <turnOffLed>
	turnOffLed(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fa5a 	bl	8000c1c <turnOffLed>

	if(toggle == 0)
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <clockConfigMin+0xf0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <clockConfigMin+0xa6>
	{
		turnOffLed(2);
 8000770:	2002      	movs	r0, #2
 8000772:	f000 fa53 	bl	8000c1c <turnOffLed>
		turnOffLed(3);
 8000776:	2003      	movs	r0, #3
 8000778:	f000 fa50 	bl	8000c1c <turnOffLed>
	else
	{
		led_7seg_set_digit(minute / 10, 2, 0);
		led_7seg_set_digit(minute % 10, 3, 0);
	}
}
 800077c:	e01d      	b.n	80007ba <clockConfigMin+0xe2>
		led_7seg_set_digit(minute / 10, 2, 0);
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <clockConfigMin+0xf4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <clockConfigMin+0xec>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1092      	asrs	r2, r2, #2
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fae6 	bl	8000d64 <led_7seg_set_digit>
		led_7seg_set_digit(minute % 10, 3, 0);
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <clockConfigMin+0xf4>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <clockConfigMin+0xec>)
 800079e:	fb83 1302 	smull	r1, r3, r3, r2
 80007a2:	1099      	asrs	r1, r3, #2
 80007a4:	17d3      	asrs	r3, r2, #31
 80007a6:	1ac8      	subs	r0, r1, r3
 80007a8:	4603      	mov	r3, r0
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4403      	add	r3, r0
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	1ad0      	subs	r0, r2, r3
 80007b2:	2200      	movs	r2, #0
 80007b4:	2103      	movs	r1, #3
 80007b6:	f000 fad5 	bl	8000d64 <led_7seg_set_digit>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000005b 	.word	0x2000005b
 80007c4:	66666667 	.word	0x66666667
 80007c8:	20000068 	.word	0x20000068
 80007cc:	20000060 	.word	0x20000060

080007d0 <clockConfigHour>:
void clockConfigHour()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	counter = (counter + 1) % 20;
 80007d4:	4b47      	ldr	r3, [pc, #284]	@ (80008f4 <clockConfigHour+0x124>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	4b47      	ldr	r3, [pc, #284]	@ (80008f8 <clockConfigHour+0x128>)
 80007dc:	fb83 1302 	smull	r1, r3, r3, r2
 80007e0:	10d9      	asrs	r1, r3, #3
 80007e2:	17d3      	asrs	r3, r2, #31
 80007e4:	1ac9      	subs	r1, r1, r3
 80007e6:	460b      	mov	r3, r1
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	1ad1      	subs	r1, r2, r3
 80007f0:	b2ca      	uxtb	r2, r1
 80007f2:	4b40      	ldr	r3, [pc, #256]	@ (80008f4 <clockConfigHour+0x124>)
 80007f4:	701a      	strb	r2, [r3, #0]
	if(counter == 1)
 80007f6:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <clockConfigHour+0x124>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d105      	bne.n	800080a <clockConfigHour+0x3a>
	{
		toggle = 1 - toggle;
 80007fe:	4b3f      	ldr	r3, [pc, #252]	@ (80008fc <clockConfigHour+0x12c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f1c3 0301 	rsb	r3, r3, #1
 8000806:	4a3d      	ldr	r2, [pc, #244]	@ (80008fc <clockConfigHour+0x12c>)
 8000808:	6013      	str	r3, [r2, #0]
	}

	if(isButtonUp())
 800080a:	f000 f88b 	bl	8000924 <isButtonUp>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00d      	beq.n	8000830 <clockConfigHour+0x60>
	{
		if(hour < 23)
 8000814:	4b3a      	ldr	r3, [pc, #232]	@ (8000900 <clockConfigHour+0x130>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b16      	cmp	r3, #22
 800081a:	dc05      	bgt.n	8000828 <clockConfigHour+0x58>
		{
			++hour;
 800081c:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <clockConfigHour+0x130>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a37      	ldr	r2, [pc, #220]	@ (8000900 <clockConfigHour+0x130>)
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e015      	b.n	8000854 <clockConfigHour+0x84>
		}
		else
		{
			hour = 0;
 8000828:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <clockConfigHour+0x130>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e011      	b.n	8000854 <clockConfigHour+0x84>
		}
	}
	else if(isButtonDown())
 8000830:	f000 f894 	bl	800095c <isButtonDown>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00c      	beq.n	8000854 <clockConfigHour+0x84>
	{
		if(hour > 0)
 800083a:	4b31      	ldr	r3, [pc, #196]	@ (8000900 <clockConfigHour+0x130>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	dd05      	ble.n	800084e <clockConfigHour+0x7e>
		{
			--hour;
 8000842:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <clockConfigHour+0x130>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	4a2d      	ldr	r2, [pc, #180]	@ (8000900 <clockConfigHour+0x130>)
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	e002      	b.n	8000854 <clockConfigHour+0x84>
		}
		else
		{
			hour = 23;
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <clockConfigHour+0x130>)
 8000850:	2217      	movs	r2, #23
 8000852:	601a      	str	r2, [r3, #0]
		}
	}
	else;
	led_7seg_set_digit(hour / 10, 0, 0);
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <clockConfigHour+0x130>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a27      	ldr	r2, [pc, #156]	@ (80008f8 <clockConfigHour+0x128>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	1092      	asrs	r2, r2, #2
 8000860:	17db      	asrs	r3, r3, #31
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fa7b 	bl	8000d64 <led_7seg_set_digit>
	led_7seg_set_digit(hour % 10, 1, 0);
 800086e:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <clockConfigHour+0x130>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <clockConfigHour+0x128>)
 8000874:	fb83 1302 	smull	r1, r3, r3, r2
 8000878:	1099      	asrs	r1, r3, #2
 800087a:	17d3      	asrs	r3, r2, #31
 800087c:	1ac8      	subs	r0, r1, r3
 800087e:	4603      	mov	r3, r0
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4403      	add	r3, r0
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	1ad0      	subs	r0, r2, r3
 8000888:	2200      	movs	r2, #0
 800088a:	2101      	movs	r1, #1
 800088c:	f000 fa6a 	bl	8000d64 <led_7seg_set_digit>

	turnOffLed(2);
 8000890:	2002      	movs	r0, #2
 8000892:	f000 f9c3 	bl	8000c1c <turnOffLed>
	turnOffLed(3);
 8000896:	2003      	movs	r0, #3
 8000898:	f000 f9c0 	bl	8000c1c <turnOffLed>

	if(toggle == 0)
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <clockConfigHour+0x12c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d106      	bne.n	80008b2 <clockConfigHour+0xe2>
	{
		turnOffLed(0);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f9b9 	bl	8000c1c <turnOffLed>
		turnOffLed(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 f9b6 	bl	8000c1c <turnOffLed>
	else
	{
		led_7seg_set_digit(hour / 10, 0, 0);
		led_7seg_set_digit(hour % 10, 1, 0);
	}
}
 80008b0:	e01d      	b.n	80008ee <clockConfigHour+0x11e>
		led_7seg_set_digit(hour / 10, 0, 0);
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <clockConfigHour+0x130>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <clockConfigHour+0x128>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1092      	asrs	r2, r2, #2
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fa4c 	bl	8000d64 <led_7seg_set_digit>
		led_7seg_set_digit(hour % 10, 1, 0);
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <clockConfigHour+0x130>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <clockConfigHour+0x128>)
 80008d2:	fb83 1302 	smull	r1, r3, r3, r2
 80008d6:	1099      	asrs	r1, r3, #2
 80008d8:	17d3      	asrs	r3, r2, #31
 80008da:	1ac8      	subs	r0, r1, r3
 80008dc:	4603      	mov	r3, r0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4403      	add	r3, r0
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	1ad0      	subs	r0, r2, r3
 80008e6:	2200      	movs	r2, #0
 80008e8:	2101      	movs	r1, #1
 80008ea:	f000 fa3b 	bl	8000d64 <led_7seg_set_digit>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000005b 	.word	0x2000005b
 80008f8:	66666667 	.word	0x66666667
 80008fc:	20000068 	.word	0x20000068
 8000900:	20000064 	.word	0x20000064

08000904 <isButtonPressed>:

int isButtonPressed(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	if(button_count[0] == 1)
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <isButtonPressed+0x1c>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <isButtonPressed+0x10>
	{
		return 1;
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <isButtonPressed+0x12>
	}
	return 0;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	20000038 	.word	0x20000038

08000924 <isButtonUp>:
int isButtonUp(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	if(button_count[3] % 20 == 1)
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <isButtonUp+0x30>)
 800092a:	88da      	ldrh	r2, [r3, #6]
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <isButtonUp+0x34>)
 800092e:	fba3 1302 	umull	r1, r3, r3, r2
 8000932:	0919      	lsrs	r1, r3, #4
 8000934:	460b      	mov	r3, r1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	b29b      	uxth	r3, r3
 8000940:	2b01      	cmp	r3, #1
 8000942:	d101      	bne.n	8000948 <isButtonUp+0x24>
	{
		return 1;
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <isButtonUp+0x26>
	}
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	20000038 	.word	0x20000038
 8000958:	cccccccd 	.word	0xcccccccd

0800095c <isButtonDown>:
int isButtonDown(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	if(button_count[7] % 20 == 1)
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <isButtonDown+0x30>)
 8000962:	89da      	ldrh	r2, [r3, #14]
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <isButtonDown+0x34>)
 8000966:	fba3 1302 	umull	r1, r3, r3, r2
 800096a:	0919      	lsrs	r1, r3, #4
 800096c:	460b      	mov	r3, r1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	440b      	add	r3, r1
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d101      	bne.n	8000980 <isButtonDown+0x24>
	{
		return 1;
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <isButtonDown+0x26>
	}
	return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000038 	.word	0x20000038
 8000990:	cccccccd 	.word	0xcccccccd

08000994 <clockFSM>:

void clockFSM()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(status)
 8000998:	4b42      	ldr	r3, [pc, #264]	@ (8000aa4 <clockFSM+0x110>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d875      	bhi.n	8000a8c <clockFSM+0xf8>
 80009a0:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <clockFSM+0x14>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	08000a4b 	.word	0x08000a4b
 80009b0:	08000a61 	.word	0x08000a61
 80009b4:	08000a77 	.word	0x08000a77
	{
	case INIT_SYSTEM:
	{
		led_7seg_set_digit(hour / 10, 0, 0);
 80009b8:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa8 <clockFSM+0x114>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a3b      	ldr	r2, [pc, #236]	@ (8000aac <clockFSM+0x118>)
 80009be:	fb82 1203 	smull	r1, r2, r2, r3
 80009c2:	1092      	asrs	r2, r2, #2
 80009c4:	17db      	asrs	r3, r3, #31
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f9c9 	bl	8000d64 <led_7seg_set_digit>
		led_7seg_set_digit(hour % 10, 1, 0);
 80009d2:	4b35      	ldr	r3, [pc, #212]	@ (8000aa8 <clockFSM+0x114>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b35      	ldr	r3, [pc, #212]	@ (8000aac <clockFSM+0x118>)
 80009d8:	fb83 1302 	smull	r1, r3, r3, r2
 80009dc:	1099      	asrs	r1, r3, #2
 80009de:	17d3      	asrs	r3, r2, #31
 80009e0:	1ac8      	subs	r0, r1, r3
 80009e2:	4603      	mov	r3, r0
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4403      	add	r3, r0
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	1ad0      	subs	r0, r2, r3
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	f000 f9b8 	bl	8000d64 <led_7seg_set_digit>
		led_7seg_set_digit(minute / 10, 2, 0);
 80009f4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <clockFSM+0x11c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a2c      	ldr	r2, [pc, #176]	@ (8000aac <clockFSM+0x118>)
 80009fa:	fb82 1203 	smull	r1, r2, r2, r3
 80009fe:	1092      	asrs	r2, r2, #2
 8000a00:	17db      	asrs	r3, r3, #31
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f9ab 	bl	8000d64 <led_7seg_set_digit>
		led_7seg_set_digit(minute % 10, 3, 0);
 8000a0e:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <clockFSM+0x11c>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <clockFSM+0x118>)
 8000a14:	fb83 1302 	smull	r1, r3, r3, r2
 8000a18:	1099      	asrs	r1, r3, #2
 8000a1a:	17d3      	asrs	r3, r2, #31
 8000a1c:	1ac8      	subs	r0, r1, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4403      	add	r3, r0
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	1ad0      	subs	r0, r2, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	f000 f99a 	bl	8000d64 <led_7seg_set_digit>
		led_7seg_set_colon(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f9bb 	bl	8000dac <led_7seg_set_colon>
		status = CLOCKING;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <clockFSM+0x110>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <clockFSM+0x120>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		second = 0;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <clockFSM+0x124>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
		break;
 8000a48:	e029      	b.n	8000a9e <clockFSM+0x10a>
	}
	case CLOCKING:
	{
		clockRun();
 8000a4a:	f7ff fdc1 	bl	80005d0 <clockRun>
		if(isButtonPressed())
 8000a4e:	f7ff ff59 	bl	8000904 <isButtonPressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d01d      	beq.n	8000a94 <clockFSM+0x100>
		{
			status = CONFIG_MINUTE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <clockFSM+0x110>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a5e:	e019      	b.n	8000a94 <clockFSM+0x100>
	}
	case CONFIG_MINUTE:
	{
		clockConfigMin();
 8000a60:	f7ff fe3a 	bl	80006d8 <clockConfigMin>
		if(isButtonPressed())
 8000a64:	f7ff ff4e 	bl	8000904 <isButtonPressed>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d014      	beq.n	8000a98 <clockFSM+0x104>
		{
			status = CONFIG_HOUR;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <clockFSM+0x110>)
 8000a70:	2203      	movs	r2, #3
 8000a72:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000a74:	e010      	b.n	8000a98 <clockFSM+0x104>
	}
	case CONFIG_HOUR:
	{
		clockConfigHour();
 8000a76:	f7ff feab 	bl	80007d0 <clockConfigHour>
		if(isButtonPressed())
 8000a7a:	f7ff ff43 	bl	8000904 <isButtonPressed>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <clockFSM+0x108>
		{
			status = INIT_SYSTEM;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <clockFSM+0x110>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000a8a:	e007      	b.n	8000a9c <clockFSM+0x108>
	}
	default:
	{
		status = INIT_SYSTEM;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <clockFSM+0x110>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
		break;
 8000a92:	e004      	b.n	8000a9e <clockFSM+0x10a>
		break;
 8000a94:	bf00      	nop
 8000a96:	e002      	b.n	8000a9e <clockFSM+0x10a>
		break;
 8000a98:	bf00      	nop
 8000a9a:	e000      	b.n	8000a9e <clockFSM+0x10a>
		break;
 8000a9c:	bf00      	nop
	}
	}
	return;
 8000a9e:	bf00      	nop
}
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000005a 	.word	0x2000005a
 8000aa8:	20000064 	.word	0x20000064
 8000aac:	66666667 	.word	0x66666667
 8000ab0:	20000060 	.word	0x20000060
 8000ab4:	2000005b 	.word	0x2000005b
 8000ab8:	2000005c 	.word	0x2000005c

08000abc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	@ 0x30
 8000ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b47      	ldr	r3, [pc, #284]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a46      	ldr	r2, [pc, #280]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b44      	ldr	r3, [pc, #272]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b40      	ldr	r3, [pc, #256]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b39      	ldr	r3, [pc, #228]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a38      	ldr	r2, [pc, #224]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b36      	ldr	r3, [pc, #216]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b32      	ldr	r3, [pc, #200]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a31      	ldr	r2, [pc, #196]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_GPIO_Init+0x138>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	481e      	ldr	r0, [pc, #120]	@ (8000bf8 <MX_GPIO_Init+0x13c>)
 8000b80:	f000 fecc 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2140      	movs	r1, #64	@ 0x40
 8000b88:	481c      	ldr	r0, [pc, #112]	@ (8000bfc <MX_GPIO_Init+0x140>)
 8000b8a:	f000 fec7 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2108      	movs	r1, #8
 8000b92:	481b      	ldr	r0, [pc, #108]	@ (8000c00 <MX_GPIO_Init+0x144>)
 8000b94:	f000 fec2 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <MX_GPIO_Init+0x13c>)
 8000bb0:	f000 fd18 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <MX_GPIO_Init+0x140>)
 8000bcc:	f000 fd0a 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <MX_GPIO_Init+0x144>)
 8000be8:	f000 fcfc 	bl	80015e4 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3730      	adds	r7, #48	@ 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	@ 0x40
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <led_7seg_init+0x14>)
 8000c0e:	f000 fe85 	bl	800191c <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021800 	.word	0x40021800

08000c1c <turnOffLed>:
 * @brief
 * @param
 * @retval
 */
void turnOffLed(int position)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if(position >= 0 && position <= 3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db07      	blt.n	8000c3a <turnOffLed+0x1e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	dc04      	bgt.n	8000c3a <turnOffLed+0x1e>
	{
		led_7seg[position] = 0xff;
 8000c30:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <turnOffLed+0x2c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	22ff      	movs	r2, #255	@ 0xff
 8000c38:	701a      	strb	r2, [r3, #0]
 	}
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000000 	.word	0x20000000

08000c4c <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	spi_buffer = spi_buffer & 0x00ff; // assign 0 to bit index 8-15.
 8000c50:	4b3f      	ldr	r3, [pc, #252]	@ (8000d50 <led_7seg_display+0x104>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b3d      	ldr	r3, [pc, #244]	@ (8000d50 <led_7seg_display+0x104>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	// shift left led_7seg at index led_7seg_index 8 bits then or with spi_buffer
	spi_buffer = spi_buffer | led_7seg[led_7seg_index] << 8;
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <led_7seg_display+0x108>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <led_7seg_display+0x10c>)
 8000c64:	5c9b      	ldrb	r3, [r3, r2]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b39      	ldr	r3, [pc, #228]	@ (8000d50 <led_7seg_display+0x104>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <led_7seg_display+0x104>)
 8000c78:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8000c7a:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <led_7seg_display+0x108>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d846      	bhi.n	8000d10 <led_7seg_display+0xc4>
 8000c82:	a201      	add	r2, pc, #4	@ (adr r2, 8000c88 <led_7seg_display+0x3c>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000c99 	.word	0x08000c99
 8000c8c:	08000cb7 	.word	0x08000cb7
 8000c90:	08000cd5 	.word	0x08000cd5
 8000c94:	08000cf3 	.word	0x08000cf3
	case 0:
		spi_buffer |= 0x00b0;
 8000c98:	4b2d      	ldr	r3, [pc, #180]	@ (8000d50 <led_7seg_display+0x104>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <led_7seg_display+0x104>)
 8000ca4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d50 <led_7seg_display+0x104>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b27      	ldr	r3, [pc, #156]	@ (8000d50 <led_7seg_display+0x104>)
 8000cb2:	801a      	strh	r2, [r3, #0]
		break;
 8000cb4:	e02d      	b.n	8000d12 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000cb6:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <led_7seg_display+0x104>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <led_7seg_display+0x104>)
 8000cc2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <led_7seg_display+0x104>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	f023 0320 	bic.w	r3, r3, #32
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <led_7seg_display+0x104>)
 8000cd0:	801a      	strh	r2, [r3, #0]
		break;
 8000cd2:	e01e      	b.n	8000d12 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <led_7seg_display+0x104>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <led_7seg_display+0x104>)
 8000ce0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <led_7seg_display+0x104>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	f023 0310 	bic.w	r3, r3, #16
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <led_7seg_display+0x104>)
 8000cee:	801a      	strh	r2, [r3, #0]
		break;
 8000cf0:	e00f      	b.n	8000d12 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <led_7seg_display+0x104>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <led_7seg_display+0x104>)
 8000cfe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <led_7seg_display+0x104>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <led_7seg_display+0x104>)
 8000d0c:	801a      	strh	r2, [r3, #0]
		break;
 8000d0e:	e000      	b.n	8000d12 <led_7seg_display+0xc6>
	default:
		break;
 8000d10:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <led_7seg_display+0x108>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	425a      	negs	r2, r3
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	bf58      	it	pl
 8000d24:	4253      	negpl	r3, r2
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <led_7seg_display+0x108>)
 8000d2a:	801a      	strh	r2, [r3, #0]

	// assign logic 0 (LOW) into latch_pin (chân nối tiếp của thanh ghi) (latch) prepare for sending messages.
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2140      	movs	r1, #64	@ 0x40
 8000d30:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <led_7seg_display+0x110>)
 8000d32:	f000 fdf3 	bl	800191c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8000d36:	2301      	movs	r3, #1
 8000d38:	2202      	movs	r2, #2
 8000d3a:	4905      	ldr	r1, [pc, #20]	@ (8000d50 <led_7seg_display+0x104>)
 8000d3c:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <led_7seg_display+0x114>)
 8000d3e:	f001 faf4 	bl	800232a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2140      	movs	r1, #64	@ 0x40
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <led_7seg_display+0x110>)
 8000d48:	f000 fde8 	bl	800191c <HAL_GPIO_WritePin>
	// Ghi giá trị logic 1 (HIGH) vào chân nối tiếp của thanh ghi (latch) để lưu trữ dữ liệu mới đã được gửi.
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000000e 	.word	0x2000000e
 8000d54:	2000006c 	.word	0x2000006c
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	20000078 	.word	0x20000078

08000d64 <led_7seg_set_digit>:
 * @param  	num	Number displayed
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led_7seg_set_digit(int num, int position, uint8_t show_dot) {
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 9) {
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0e      	blt.n	8000d96 <led_7seg_set_digit+0x32>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	dc0b      	bgt.n	8000d96 <led_7seg_set_digit+0x32>
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 8000d7e:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <led_7seg_set_digit+0x40>)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	b2d9      	uxtb	r1, r3
 8000d8c:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <led_7seg_set_digit+0x44>)
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	460a      	mov	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	}
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000004 	.word	0x20000004
 8000da8:	20000000 	.word	0x20000000

08000dac <led_7seg_set_colon>:
 *          This parameter can be one of the following values:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led_7seg_set_colon(uint8_t status) {
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d107      	bne.n	8000dcc <led_7seg_set_colon+0x20>
		spi_buffer &= ~(1 << 3);
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <led_7seg_set_colon+0x3c>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	f023 0308 	bic.w	r3, r3, #8
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <led_7seg_set_colon+0x3c>)
 8000dc8:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 8000dca:	e006      	b.n	8000dda <led_7seg_set_colon+0x2e>
		spi_buffer |= (1 << 3);
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <led_7seg_set_colon+0x3c>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <led_7seg_set_colon+0x3c>)
 8000dd8:	801a      	strh	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	2000000e 	.word	0x2000000e

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df0:	f000 fa74 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df4:	f000 f81a 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df8:	f7ff fe60 	bl	8000abc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dfc:	f000 f9d2 	bl	80011a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000e00:	f000 f8de 	bl	8000fc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  initSystem();
 8000e04:	f000 f87c 	bl	8000f00 <initSystem>
  initClock(10, 10);
 8000e08:	210a      	movs	r1, #10
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f7ff fbc0 	bl	8000590 <initClock>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getFlagTimer2())
 8000e10:	f000 f8a6 	bl	8000f60 <getFlagTimer2>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0fa      	beq.n	8000e10 <main+0x24>
	  {
		  setTimer2(50);
 8000e1a:	2032      	movs	r0, #50	@ 0x32
 8000e1c:	f000 f88c 	bl	8000f38 <setTimer2>

		  clockFSM();
 8000e20:	f7ff fdb8 	bl	8000994 <clockFSM>

		  button_scan();
 8000e24:	f7ff fb48 	bl	80004b8 <button_scan>
	  if(getFlagTimer2())
 8000e28:	e7f2      	b.n	8000e10 <main+0x24>
	...

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	@ 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	2230      	movs	r2, #48	@ 0x30
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fc38 	bl	80036b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <SystemClock_Config+0xcc>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a27      	ldr	r2, [pc, #156]	@ (8000ef8 <SystemClock_Config+0xcc>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <SystemClock_Config+0xcc>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a21      	ldr	r2, [pc, #132]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e90:	2310      	movs	r3, #16
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e94:	2302      	movs	r3, #2
 8000e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ea0:	23a8      	movs	r3, #168	@ 0xa8
 8000ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fd4d 	bl	8001950 <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ebc:	f000 f82c 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ecc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ed2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ed6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2105      	movs	r1, #5
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ffae 	bl	8001e40 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eea:	f000 f815 	bl	8000f18 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	@ 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000

08000f00 <initSystem>:

/* USER CODE BEGIN 4 */
void initSystem()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	initializeTimer2();
 8000f04:	f000 f80e 	bl	8000f24 <initializeTimer2>
	led_7seg_init();
 8000f08:	f7ff fe7c 	bl	8000c04 <led_7seg_init>
	setTimer2(1000);
 8000f0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f10:	f000 f812 	bl	8000f38 <setTimer2>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <initializeTimer2>:
 */

#include "softwareTimer.h"

void initializeTimer2()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <initializeTimer2+0x10>)
 8000f2a:	f001 ff9b 	bl	8002e64 <HAL_TIM_Base_Start_IT>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000d0 	.word	0x200000d0

08000f38 <setTimer2>:

uint32_t timer2_counter = 0;
uint8_t timer2_flag = 0;

void setTimer2(uint32_t duration)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000f40:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <setTimer2+0x20>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <setTimer2+0x24>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000070 	.word	0x20000070
 8000f5c:	20000074 	.word	0x20000074

08000f60 <getFlagTimer2>:

uint8_t getFlagTimer2()
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	return timer2_flag;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <getFlagTimer2+0x14>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000074 	.word	0x20000074

08000f78 <timerRun>:

void timerRun()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(timer2_counter > 0)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <timerRun+0x2c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <timerRun+0x16>
	{
		--timer2_counter;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <timerRun+0x2c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <timerRun+0x2c>)
 8000f8c:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter <= 0)
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <timerRun+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <timerRun+0x24>
	{
		timer2_flag = 1;
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <timerRun+0x30>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
	}

	led_7seg_display();
 8000f9c:	f7ff fe56 	bl	8000c4c <led_7seg_display>

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000070 	.word	0x20000070
 8000fa8:	20000074 	.word	0x20000074

08000fac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fb4:	f7ff ffe0 	bl	8000f78 <timerRun>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	@ (8001028 <MX_SPI1_Init+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_SPI1_Init+0x64>)
 800100c:	220a      	movs	r2, #10
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_SPI1_Init+0x64>)
 8001012:	f001 f901 	bl	8002218 <HAL_SPI_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800101c:	f7ff ff7c 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000078 	.word	0x20000078
 8001028:	40013000 	.word	0x40013000

0800102c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <HAL_SPI_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12b      	bne.n	80010a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_SPI_MspInit+0x88>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_SPI_MspInit+0x88>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_SPI_MspInit+0x88>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_SPI_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_SPI_MspInit+0x88>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_SPI_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001086:	2338      	movs	r3, #56	@ 0x38
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001096:	2305      	movs	r3, #5
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <HAL_SPI_MspInit+0x8c>)
 80010a2:	f000 fa9f 	bl	80015e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	@ 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40013000 	.word	0x40013000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001108 <HAL_MspInit+0x4c>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <HAL_MspInit+0x4c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <HAL_MspInit+0x4c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <NMI_Handler+0x4>

08001114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <UsageFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001162:	f000 f90d 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <TIM2_IRQHandler+0x10>)
 8001172:	f001 fee7 	bl	8002f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000d0 	.word	0x200000d0

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011ca:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011d8:	2209      	movs	r2, #9
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e8:	4813      	ldr	r0, [pc, #76]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011ea:	f001 fdeb 	bl	8002dc4 <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f4:	f7ff fe90 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <MX_TIM2_Init+0x94>)
 8001206:	f001 ff8d 	bl	8003124 <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001210:	f7ff fe82 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_TIM2_Init+0x94>)
 8001222:	f002 f9b5 	bl	8003590 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800122c:	f7ff fe74 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000d0 	.word	0x200000d0

0800123c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800124c:	d115      	bne.n	800127a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_TIM_Base_MspInit+0x48>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_TIM_Base_MspInit+0x48>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_TIM_Base_MspInit+0x48>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	201c      	movs	r0, #28
 8001270:	f000 f981 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001274:	201c      	movs	r0, #28
 8001276:	f000 f99a 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800128c:	f7ff ff78 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 fa03 	bl	80036c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fd97 	bl	8000dec <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80012cc:	08003740 	.word	0x08003740
  ldr r2, =_sbss
 80012d0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80012d4:	2000011c 	.word	0x2000011c

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f92b 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	200f      	movs	r0, #15
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fed4 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f943 	bl	80015ca <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800135c:	f000 f90b 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	@ (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000010 	.word	0x20000010
 8001378:	20000018 	.word	0x20000018
 800137c:	20000014 	.word	0x20000014

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000018 	.word	0x20000018
 80013a4:	20000118 	.word	0x20000118

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000118 	.word	0x20000118

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	@ (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	@ (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	@ (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e16b      	b.n	80018d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 815a 	bne.w	80018d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d005      	beq.n	8001636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001632:	2b02      	cmp	r3, #2
 8001634:	d130      	bne.n	8001698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 0201 	and.w	r2, r3, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d017      	beq.n	80016d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	69b9      	ldr	r1, [r7, #24]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80b4 	beq.w	80018d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b60      	ldr	r3, [pc, #384]	@ (80018f0 <HAL_GPIO_Init+0x30c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	4a5f      	ldr	r2, [pc, #380]	@ (80018f0 <HAL_GPIO_Init+0x30c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001778:	6453      	str	r3, [r2, #68]	@ 0x44
 800177a:	4b5d      	ldr	r3, [pc, #372]	@ (80018f0 <HAL_GPIO_Init+0x30c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001786:	4a5b      	ldr	r2, [pc, #364]	@ (80018f4 <HAL_GPIO_Init+0x310>)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <HAL_GPIO_Init+0x314>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d02b      	beq.n	800180a <HAL_GPIO_Init+0x226>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a51      	ldr	r2, [pc, #324]	@ (80018fc <HAL_GPIO_Init+0x318>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d025      	beq.n	8001806 <HAL_GPIO_Init+0x222>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <HAL_GPIO_Init+0x31c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_Init+0x21e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001904 <HAL_GPIO_Init+0x320>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x21a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001908 <HAL_GPIO_Init+0x324>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x216>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <HAL_GPIO_Init+0x328>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x212>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001910 <HAL_GPIO_Init+0x32c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x20e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001914 <HAL_GPIO_Init+0x330>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x20a>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e00e      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017ee:	2308      	movs	r3, #8
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x228>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x228>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x228>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	@ (80018f4 <HAL_GPIO_Init+0x310>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <HAL_GPIO_Init+0x334>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a32      	ldr	r2, [pc, #200]	@ (8001918 <HAL_GPIO_Init+0x334>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <HAL_GPIO_Init+0x334>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <HAL_GPIO_Init+0x334>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <HAL_GPIO_Init+0x334>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <HAL_GPIO_Init+0x334>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_GPIO_Init+0x334>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018cc:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <HAL_GPIO_Init+0x334>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f ae90 	bls.w	8001600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e267      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d075      	beq.n	8001a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196e:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d00c      	beq.n	8001994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b85      	ldr	r3, [pc, #532]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001982:	2b08      	cmp	r3, #8
 8001984:	d112      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b82      	ldr	r3, [pc, #520]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d05b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x108>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d157      	bne.n	8001a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e242      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x74>
 80019b6:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a75      	ldr	r2, [pc, #468]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b6d      	ldr	r3, [pc, #436]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6c      	ldr	r2, [pc, #432]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019e8:	4b69      	ldr	r3, [pc, #420]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a68      	ldr	r2, [pc, #416]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fcce 	bl	80013a8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fcca 	bl	80013a8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	@ 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e207      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b5b      	ldr	r3, [pc, #364]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xc0>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fcba 	bl	80013a8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fcb6 	bl	80013a8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1f3      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0xe8>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a66:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b44      	ldr	r3, [pc, #272]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1c7      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4937      	ldr	r1, [pc, #220]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	e03a      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac0:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_RCC_OscConfig+0x244>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fc6f 	bl	80013a8 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fc6b 	bl	80013a8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1a8      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4925      	ldr	r1, [pc, #148]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x244>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc4e 	bl	80013a8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b10:	f7ff fc4a 	bl	80013a8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e187      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d036      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <HAL_RCC_OscConfig+0x248>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fc2e 	bl	80013a8 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc2a 	bl	80013a8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e167      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x200>
 8001b6e:	e01b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_OscConfig+0x248>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fc17 	bl	80013a8 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e00e      	b.n	8001b9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fc13 	bl	80013a8 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d907      	bls.n	8001b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e150      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	42470000 	.word	0x42470000
 8001b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	4b88      	ldr	r3, [pc, #544]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ea      	bne.n	8001b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8097 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bba:	4b81      	ldr	r3, [pc, #516]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b7d      	ldr	r3, [pc, #500]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a7c      	ldr	r2, [pc, #496]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b77      	ldr	r3, [pc, #476]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b74      	ldr	r3, [pc, #464]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a73      	ldr	r2, [pc, #460]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fbd3 	bl	80013a8 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fbcf 	bl	80013a8 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e10c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2ea>
 8001c2c:	4b64      	ldr	r3, [pc, #400]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c30:	4a63      	ldr	r2, [pc, #396]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x324>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x30c>
 8001c42:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0x324>
 8001c5c:	4b58      	ldr	r3, [pc, #352]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a57      	ldr	r2, [pc, #348]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	4b55      	ldr	r3, [pc, #340]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	4a54      	ldr	r2, [pc, #336]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d015      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fb94 	bl	80013a8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb90 	bl	80013a8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0cb      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	4b49      	ldr	r3, [pc, #292]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ee      	beq.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fb7e 	bl	80013a8 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb7a 	bl	80013a8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0b5      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ee      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd8:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	4a38      	ldr	r2, [pc, #224]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a1 	beq.w	8001e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cee:	4b34      	ldr	r3, [pc, #208]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d05c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d141      	bne.n	8001d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb4e 	bl	80013a8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff fb4a 	bl	80013a8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e087      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	491b      	ldr	r1, [pc, #108]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fb23 	bl	80013a8 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff fb1f 	bl	80013a8 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e05c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x416>
 8001d84:	e054      	b.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fb0c 	bl	80013a8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff fb08 	bl	80013a8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e045      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
 8001db2:	e03d      	b.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e038      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x4ec>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d028      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d121      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11a      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d111      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	3b01      	subs	r3, #1
 8001e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0cc      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b68      	ldr	r3, [pc, #416]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d90c      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b59      	ldr	r3, [pc, #356]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a58      	ldr	r2, [pc, #352]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b50      	ldr	r3, [pc, #320]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	494d      	ldr	r1, [pc, #308]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d044      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d119      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e067      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f1e:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 0203 	bic.w	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4934      	ldr	r1, [pc, #208]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f30:	f7ff fa3a 	bl	80013a8 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	f7ff fa36 	bl	80013a8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e04f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 020c 	and.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d1eb      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20c      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e032      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4916      	ldr	r1, [pc, #88]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	490e      	ldr	r1, [pc, #56]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fc6:	f000 f821 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	490a      	ldr	r1, [pc, #40]	@ (8002000 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	5ccb      	ldrb	r3, [r1, r3]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f99a 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	08003720 	.word	0x08003720
 8002004:	20000010 	.word	0x20000010
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002010:	b094      	sub	sp, #80	@ 0x50
 8002012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	647b      	str	r3, [r7, #68]	@ 0x44
 8002018:	2300      	movs	r3, #0
 800201a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002024:	4b79      	ldr	r3, [pc, #484]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d00d      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x40>
 8002030:	2b08      	cmp	r3, #8
 8002032:	f200 80e1 	bhi.w	80021f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 800203a:	2b04      	cmp	r3, #4
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x3a>
 800203e:	e0db      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b73      	ldr	r3, [pc, #460]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x204>)
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002044:	e0db      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002046:	4b73      	ldr	r3, [pc, #460]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x208>)
 8002048:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800204a:	e0d8      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002054:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002056:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b6a      	ldr	r3, [pc, #424]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	2200      	movs	r2, #0
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800206c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002074:	633b      	str	r3, [r7, #48]	@ 0x30
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	@ 0x34
 800207a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800207e:	4622      	mov	r2, r4
 8002080:	462b      	mov	r3, r5
 8002082:	f04f 0000 	mov.w	r0, #0
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	0159      	lsls	r1, r3, #5
 800208c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002090:	0150      	lsls	r0, r2, #5
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4621      	mov	r1, r4
 8002098:	1a51      	subs	r1, r2, r1
 800209a:	6139      	str	r1, [r7, #16]
 800209c:	4629      	mov	r1, r5
 800209e:	eb63 0301 	sbc.w	r3, r3, r1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020b0:	4659      	mov	r1, fp
 80020b2:	018b      	lsls	r3, r1, #6
 80020b4:	4651      	mov	r1, sl
 80020b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ba:	4651      	mov	r1, sl
 80020bc:	018a      	lsls	r2, r1, #6
 80020be:	4651      	mov	r1, sl
 80020c0:	ebb2 0801 	subs.w	r8, r2, r1
 80020c4:	4659      	mov	r1, fp
 80020c6:	eb63 0901 	sbc.w	r9, r3, r1
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020de:	4690      	mov	r8, r2
 80020e0:	4699      	mov	r9, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	eb18 0303 	adds.w	r3, r8, r3
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	462b      	mov	r3, r5
 80020ec:	eb49 0303 	adc.w	r3, r9, r3
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020fe:	4629      	mov	r1, r5
 8002100:	024b      	lsls	r3, r1, #9
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002108:	4621      	mov	r1, r4
 800210a:	024a      	lsls	r2, r1, #9
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800211c:	f7fe f854 	bl	80001c8 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002128:	e058      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212a:	4b38      	ldr	r3, [pc, #224]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	2200      	movs	r2, #0
 8002132:	4618      	mov	r0, r3
 8002134:	4611      	mov	r1, r2
 8002136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002144:	4642      	mov	r2, r8
 8002146:	464b      	mov	r3, r9
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	0159      	lsls	r1, r3, #5
 8002152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002156:	0150      	lsls	r0, r2, #5
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4641      	mov	r1, r8
 800215e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002162:	4649      	mov	r1, r9
 8002164:	eb63 0b01 	sbc.w	fp, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800217c:	ebb2 040a 	subs.w	r4, r2, sl
 8002180:	eb63 050b 	sbc.w	r5, r3, fp
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	00eb      	lsls	r3, r5, #3
 800218e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002192:	00e2      	lsls	r2, r4, #3
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	4643      	mov	r3, r8
 800219a:	18e3      	adds	r3, r4, r3
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	464b      	mov	r3, r9
 80021a0:	eb45 0303 	adc.w	r3, r5, r3
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021b2:	4629      	mov	r1, r5
 80021b4:	028b      	lsls	r3, r1, #10
 80021b6:	4621      	mov	r1, r4
 80021b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021bc:	4621      	mov	r1, r4
 80021be:	028a      	lsls	r2, r1, #10
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c6:	2200      	movs	r2, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	61fa      	str	r2, [r7, #28]
 80021cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d0:	f7fd fffa 	bl	80001c8 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4613      	mov	r3, r2
 80021da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80021ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x204>)
 80021fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002200:	4618      	mov	r0, r3
 8002202:	3750      	adds	r7, #80	@ 0x50
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07b      	b.n	8002322 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800223a:	d009      	beq.n	8002250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
 8002242:	e005      	b.n	8002250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fede 	bl	800102c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002286:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	f003 0104 	and.w	r1, r3, #4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	f003 0210 	and.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002310:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b088      	sub	sp, #32
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_SPI_Transmit+0x22>
 8002348:	2302      	movs	r3, #2
 800234a:	e12d      	b.n	80025a8 <HAL_SPI_Transmit+0x27e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002354:	f7ff f828 	bl	80013a8 <HAL_GetTick>
 8002358:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d002      	beq.n	8002370 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800236e:	e116      	b.n	800259e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_SPI_Transmit+0x52>
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002380:	e10d      	b.n	800259e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c8:	d10f      	bne.n	80023ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	2b40      	cmp	r3, #64	@ 0x40
 80023f6:	d007      	beq.n	8002408 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002410:	d14f      	bne.n	80024b2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_SPI_Transmit+0xf6>
 800241a:	8afb      	ldrh	r3, [r7, #22]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d142      	bne.n	80024a6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	1c9a      	adds	r2, r3, #2
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002444:	e02f      	b.n	80024a6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d112      	bne.n	800247a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	1c9a      	adds	r2, r3, #2
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002478:	e015      	b.n	80024a6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800247a:	f7fe ff95 	bl	80013a8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d803      	bhi.n	8002492 <HAL_SPI_Transmit+0x168>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002490:	d102      	bne.n	8002498 <HAL_SPI_Transmit+0x16e>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80024a4:	e07b      	b.n	800259e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ca      	bne.n	8002446 <HAL_SPI_Transmit+0x11c>
 80024b0:	e050      	b.n	8002554 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Transmit+0x196>
 80024ba:	8afb      	ldrh	r3, [r7, #22]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d144      	bne.n	800254a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024e6:	e030      	b.n	800254a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d113      	bne.n	800251e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800251c:	e015      	b.n	800254a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800251e:	f7fe ff43 	bl	80013a8 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d803      	bhi.n	8002536 <HAL_SPI_Transmit+0x20c>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002534:	d102      	bne.n	800253c <HAL_SPI_Transmit+0x212>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002548:	e029      	b.n	800259e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1c9      	bne.n	80024e8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	6839      	ldr	r1, [r7, #0]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fbdf 	bl	8002d1c <SPI_EndRxTxTransaction>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
 8002594:	e003      	b.n	800259e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025d4:	e0fb      	b.n	80027ce <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025de:	d112      	bne.n	8002606 <HAL_SPI_Receive+0x56>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10e      	bne.n	8002606 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2204      	movs	r2, #4
 80025ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f8ef 	bl	80027e0 <HAL_SPI_TransmitReceive>
 8002602:	4603      	mov	r3, r0
 8002604:	e0e8      	b.n	80027d8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_SPI_Receive+0x64>
 8002610:	2302      	movs	r3, #2
 8002612:	e0e1      	b.n	80027d8 <HAL_SPI_Receive+0x228>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800261c:	f7fe fec4 	bl	80013a8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_SPI_Receive+0x7e>
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002632:	e0cc      	b.n	80027ce <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2204      	movs	r2, #4
 8002638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800267a:	d10f      	bne.n	800269c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800268a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b40      	cmp	r3, #64	@ 0x40
 80026a8:	d007      	beq.n	80026ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d16a      	bne.n	8002798 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026c2:	e032      	b.n	800272a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d115      	bne.n	80026fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f103 020c 	add.w	r2, r3, #12
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026fc:	e015      	b.n	800272a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fe:	f7fe fe53 	bl	80013a8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d803      	bhi.n	8002716 <HAL_SPI_Receive+0x166>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002714:	d102      	bne.n	800271c <HAL_SPI_Receive+0x16c>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002728:	e051      	b.n	80027ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1c7      	bne.n	80026c4 <HAL_SPI_Receive+0x114>
 8002734:	e035      	b.n	80027a2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d113      	bne.n	800276c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	b292      	uxth	r2, r2
 8002750:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	1c9a      	adds	r2, r3, #2
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800276a:	e015      	b.n	8002798 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276c:	f7fe fe1c 	bl	80013a8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d803      	bhi.n	8002784 <HAL_SPI_Receive+0x1d4>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002782:	d102      	bne.n	800278a <HAL_SPI_Receive+0x1da>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002796:	e01a      	b.n	80027ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1c9      	bne.n	8002736 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fa52 	bl	8002c50 <SPI_EndRxTransaction>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
 80027c4:	e003      	b.n	80027ce <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027ee:	2301      	movs	r3, #1
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x26>
 8002802:	2302      	movs	r3, #2
 8002804:	e198      	b.n	8002b38 <HAL_SPI_TransmitReceive+0x358>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800280e:	f7fe fdcb 	bl	80013a8 <HAL_GetTick>
 8002812:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800281a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002828:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00f      	beq.n	8002850 <HAL_SPI_TransmitReceive+0x70>
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002836:	d107      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d103      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x68>
 8002840:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002844:	2b04      	cmp	r3, #4
 8002846:	d003      	beq.n	8002850 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800284e:	e16d      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x82>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x82>
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002868:	e160      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b04      	cmp	r3, #4
 8002874:	d003      	beq.n	800287e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2205      	movs	r2, #5
 800287a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	887a      	ldrh	r2, [r7, #2]
 800288e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d007      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028da:	d17c      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_SPI_TransmitReceive+0x10a>
 80028e4:	8b7b      	ldrh	r3, [r7, #26]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d16a      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800290e:	e057      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d11b      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x176>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d016      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x176>
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d113      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	1c9a      	adds	r2, r3, #2
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d119      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x1b8>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d014      	beq.n	8002998 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	b292      	uxth	r2, r2
 800297a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002994:	2301      	movs	r3, #1
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002998:	f7fe fd06 	bl	80013a8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d80b      	bhi.n	80029c0 <HAL_SPI_TransmitReceive+0x1e0>
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029ae:	d007      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80029be:	e0b5      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1a2      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x130>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d19d      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x130>
 80029d4:	e080      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x204>
 80029de:	8b7b      	ldrh	r3, [r7, #26]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d16f      	bne.n	8002ac4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0a:	e05b      	b.n	8002ac4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d11c      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x274>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x274>
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d114      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	7812      	ldrb	r2, [r2, #0]
 8002a36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d119      	bne.n	8002a96 <HAL_SPI_TransmitReceive+0x2b6>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d014      	beq.n	8002a96 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a92:	2301      	movs	r3, #1
 8002a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a96:	f7fe fc87 	bl	80013a8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d803      	bhi.n	8002aae <HAL_SPI_TransmitReceive+0x2ce>
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x2d4>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002ac2:	e033      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d19e      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x22c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d199      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f91d 	bl	8002d1c <SPI_EndRxTxTransaction>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002af4:	e01a      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b22:	e003      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002b34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3730      	adds	r7, #48	@ 0x30
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b50:	f7fe fc2a 	bl	80013a8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b60:	f7fe fc22 	bl	80013a8 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b66:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	015b      	lsls	r3, r3, #5
 8002b6c:	0d1b      	lsrs	r3, r3, #20
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b76:	e054      	b.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b7e:	d050      	beq.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b80:	f7fe fc12 	bl	80013a8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d902      	bls.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d13d      	bne.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bae:	d111      	bne.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb8:	d004      	beq.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc2:	d107      	bne.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bdc:	d10f      	bne.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e017      	b.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d19b      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000010 	.word	0x20000010

08002c50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c64:	d111      	bne.n	8002c8a <SPI_EndRxTransaction+0x3a>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c6e:	d004      	beq.n	8002c7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c78:	d107      	bne.n	8002c8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c92:	d12a      	bne.n	8002cea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9c:	d012      	beq.n	8002cc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ff49 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02d      	beq.n	8002d10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e026      	b.n	8002d12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2101      	movs	r1, #1
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff ff36 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01a      	beq.n	8002d10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e013      	b.n	8002d12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ff23 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2102      	movs	r1, #2
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff ff04 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e032      	b.n	8002db4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <SPI_EndRxTxTransaction+0xa0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <SPI_EndRxTxTransaction+0xa4>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	0d5b      	lsrs	r3, r3, #21
 8002d5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d6c:	d112      	bne.n	8002d94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2180      	movs	r1, #128	@ 0x80
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff fee1 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e00f      	b.n	8002db4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	2b80      	cmp	r3, #128	@ 0x80
 8002dac:	d0f2      	beq.n	8002d94 <SPI_EndRxTxTransaction+0x78>
 8002dae:	e000      	b.n	8002db2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002db0:	bf00      	nop
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000010 	.word	0x20000010
 8002dc0:	165e9f81 	.word	0x165e9f81

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fa26 	bl	800123c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 fa7e 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e04e      	b.n	8002f1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	@ (8002f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1f      	ldr	r2, [pc, #124]	@ (8002f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x80>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a18      	ldr	r2, [pc, #96]	@ (8002f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d010      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	e007      	b.n	8002f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40010400 	.word	0x40010400
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40001800 	.word	0x40001800

08002f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d020      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0202 	mvn.w	r2, #2
 8002f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f999 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f98b 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f99c 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0204 	mvn.w	r2, #4
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f973 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f965 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f976 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d020      	beq.n	8003040 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0208 	mvn.w	r2, #8
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2204      	movs	r2, #4
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f94d 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f93f 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f950 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0210 	mvn.w	r2, #16
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2208      	movs	r2, #8
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f927 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f919 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f92a 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0201 	mvn.w	r2, #1
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd ff7e 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fae4 	bl	800369c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8fb 	bl	80032ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0220 	mvn.w	r2, #32
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fab6 	bl	8003688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIM_ConfigClockSource+0x1c>
 800313c:	2302      	movs	r3, #2
 800313e:	e0b4      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x186>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800315e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003178:	d03e      	beq.n	80031f8 <HAL_TIM_ConfigClockSource+0xd4>
 800317a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317e:	f200 8087 	bhi.w	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003186:	f000 8086 	beq.w	8003296 <HAL_TIM_ConfigClockSource+0x172>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318e:	d87f      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d01a      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0xa6>
 8003194:	2b70      	cmp	r3, #112	@ 0x70
 8003196:	d87b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b60      	cmp	r3, #96	@ 0x60
 800319a:	d050      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x11a>
 800319c:	2b60      	cmp	r3, #96	@ 0x60
 800319e:	d877      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b50      	cmp	r3, #80	@ 0x50
 80031a2:	d03c      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xfa>
 80031a4:	2b50      	cmp	r3, #80	@ 0x50
 80031a6:	d873      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d058      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x13a>
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d86f      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b30      	cmp	r3, #48	@ 0x30
 80031b2:	d064      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031b4:	2b30      	cmp	r3, #48	@ 0x30
 80031b6:	d86b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d060      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d867      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d05a      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	e062      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031da:	f000 f9b9 	bl	8003550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	609a      	str	r2, [r3, #8]
      break;
 80031f6:	e04f      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003208:	f000 f9a2 	bl	8003550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800321a:	609a      	str	r2, [r3, #8]
      break;
 800321c:	e03c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	461a      	mov	r2, r3
 800322c:	f000 f916 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2150      	movs	r1, #80	@ 0x50
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f96f 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800323c:	e02c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	461a      	mov	r2, r3
 800324c:	f000 f935 	bl	80034ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2160      	movs	r1, #96	@ 0x60
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f95f 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800325c:	e01c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	461a      	mov	r2, r3
 800326c:	f000 f8f6 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2140      	movs	r1, #64	@ 0x40
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f94f 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800327c:	e00c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 f946 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800328e:	e003      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e000      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a46      	ldr	r2, [pc, #280]	@ (8003430 <TIM_Base_SetConfig+0x12c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d013      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003322:	d00f      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a43      	ldr	r2, [pc, #268]	@ (8003434 <TIM_Base_SetConfig+0x130>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a42      	ldr	r2, [pc, #264]	@ (8003438 <TIM_Base_SetConfig+0x134>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a41      	ldr	r2, [pc, #260]	@ (800343c <TIM_Base_SetConfig+0x138>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a40      	ldr	r2, [pc, #256]	@ (8003440 <TIM_Base_SetConfig+0x13c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a35      	ldr	r2, [pc, #212]	@ (8003430 <TIM_Base_SetConfig+0x12c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02b      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003364:	d027      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a32      	ldr	r2, [pc, #200]	@ (8003434 <TIM_Base_SetConfig+0x130>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d023      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <TIM_Base_SetConfig+0x134>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a30      	ldr	r2, [pc, #192]	@ (800343c <TIM_Base_SetConfig+0x138>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01b      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2f      	ldr	r2, [pc, #188]	@ (8003440 <TIM_Base_SetConfig+0x13c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d017      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2e      	ldr	r2, [pc, #184]	@ (8003444 <TIM_Base_SetConfig+0x140>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2d      	ldr	r2, [pc, #180]	@ (8003448 <TIM_Base_SetConfig+0x144>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00f      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2c      	ldr	r2, [pc, #176]	@ (800344c <TIM_Base_SetConfig+0x148>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003450 <TIM_Base_SetConfig+0x14c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <TIM_Base_SetConfig+0x150>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a29      	ldr	r2, [pc, #164]	@ (8003458 <TIM_Base_SetConfig+0x154>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a10      	ldr	r2, [pc, #64]	@ (8003430 <TIM_Base_SetConfig+0x12c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0xf8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <TIM_Base_SetConfig+0x13c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	611a      	str	r2, [r3, #16]
  }
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 030a 	bic.w	r3, r3, #10
 8003498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 0210 	bic.w	r2, r3, #16
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	031b      	lsls	r3, r3, #12
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	f043 0307 	orr.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800356a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	431a      	orrs	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e05a      	b.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	@ (800366c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f4:	d01d      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1a      	ldr	r2, [pc, #104]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a18      	ldr	r2, [pc, #96]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a15      	ldr	r2, [pc, #84]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10c      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40010400 	.word	0x40010400
 8003680:	40014000 	.word	0x40014000
 8003684:	40001800 	.word	0x40001800

08003688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <memset>:
 80036b0:	4402      	add	r2, r0
 80036b2:	4603      	mov	r3, r0
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d100      	bne.n	80036ba <memset+0xa>
 80036b8:	4770      	bx	lr
 80036ba:	f803 1b01 	strb.w	r1, [r3], #1
 80036be:	e7f9      	b.n	80036b4 <memset+0x4>

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4d0d      	ldr	r5, [pc, #52]	@ (80036f8 <__libc_init_array+0x38>)
 80036c4:	4c0d      	ldr	r4, [pc, #52]	@ (80036fc <__libc_init_array+0x3c>)
 80036c6:	1b64      	subs	r4, r4, r5
 80036c8:	10a4      	asrs	r4, r4, #2
 80036ca:	2600      	movs	r6, #0
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003700 <__libc_init_array+0x40>)
 80036d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003704 <__libc_init_array+0x44>)
 80036d4:	f000 f818 	bl	8003708 <_init>
 80036d8:	1b64      	subs	r4, r4, r5
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	2600      	movs	r6, #0
 80036de:	42a6      	cmp	r6, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e8:	4798      	blx	r3
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f2:	4798      	blx	r3
 80036f4:	3601      	adds	r6, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	08003738 	.word	0x08003738
 80036fc:	08003738 	.word	0x08003738
 8003700:	08003738 	.word	0x08003738
 8003704:	0800373c 	.word	0x0800373c

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
